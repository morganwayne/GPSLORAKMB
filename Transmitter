#include <TinyGPS++.h>  // Library GPS
#include <SoftwareSerial.h>
#include <TimeLib.h>
#include <EEPROM.h>
#include <SPI.h>
#include <LoRA.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Objek GPS
TinyGPSPlus gps;
double latitude, longitude;
SoftwareSerial swSer(13, 12);

// LED & Waktu
#define LED_BUILTIN 25
#define INTERVAL 1000
unsigned long previousMillis = 0;
String gpslink = "";
int counter = 0;
unsigned long counter1 = 0;
byte Second, Minute, Hour, Day, Month;
int Year;
int UTC_offset = 7;  // WIB=7, WITA=8, WIT=9
String data_waktu = "";

// Pin LoRA
#define SCK 5
#define MISO 19
#define MOSI 27
#define SS 18
#define RST 23
#define DIO0 26
#define BAND 915E6

// Pin OLED
#define OLED_SDA 21
#define OLED_SCL 22
#define OLED_RST 16
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

// Tombol
#define BUTTON 14
#define GND 15

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

void send_koordinat() {
    LoRA.beginPacket();
    LoRA.print("*");
    LoRA.print(latitude, 6);
    LoRA.print(",");
    LoRA.print(longitude, 6);
    LoRA.print(",");
    LoRA.print(data_waktu);
    LoRA.print("#\n");
    LoRA.endPacket();

    Serial.print(latitude, 6);
    Serial.print(",");
    Serial.print(longitude, 6);
    Serial.print(",");
    Serial.println(data_waktu);
}

void read_gps() {
    while (swSer.available()) {
        gps.encode(swSer.read());
    }
}

void get_data_gps() {
    if (gps.location.isUpdated()) {
        latitude = gps.location.lat();
        longitude = gps.location.lng();
    }
    if (gps.time.isValid()) {
        Hour = gps.time.hour();
        Minute = gps.time.minute();
        Second = gps.time.second();
    }
    if (gps.date.isValid()) {
        Day = gps.date.day();
        Month = gps.date.month();
        Year = gps.date.year();
    }

    setTime(Hour, Minute, Second, Day, Month, Year);
    adjustTime(UTC_offset * SECS_PER_HOUR);
    data_waktu = String(day()) + "/" + String(month()) + "/" + String(year()) +
                 " " + String(hour()) + ":" + String(minute()) + ":" + String(second());
}

void tasktimer() {
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= INTERVAL) {
        previousMillis = currentMillis;
        counter1++;

        if (digitalRead(BUTTON) == 0 && counter1 < 300) {
            UTC_offset = (UTC_offset >= 9) ? 7 : UTC_offset + 1;
            EEPROM.write(0, UTC_offset);
            EEPROM.commit();
            counter1 = 0;
        }

        get_data_gps();
        gpslink = "www.google.com/maps/place/" + String(latitude, 6) + "," + String(longitude, 6);

        display.clearDisplay();
        display.setCursor(0, 0);
        display.print("TX: "); display.print(BAND);
        display.setCursor(0, 10);
        display.print("LAT: "); display.print(latitude, 6);
        display.setCursor(0, 20);
        display.print("LON: "); display.print(longitude, 6);
        display.setCursor(0, 30);
        display.print("CNT: "); display.print(counter);
        display.setCursor(0, 40);
        display.print(data_waktu);
        display.setCursor(0, 50);
        display.print("ZONA: ");
        display.print(UTC_offset == 7 ? "WIB" : UTC_offset == 8 ? "WITA" : "WIT");
        display.display();

        if (counter == 0) send_koordinat();
        counter = (counter >= 59) ? 0 : counter + 1;
        digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
    }
}

void setup() {
    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(GND, OUTPUT);
    digitalWrite(GND, LOW);
    pinMode(BUTTON, INPUT_PULLUP);
    EEPROM.begin(512);
    UTC_offset = EEPROM.read(0);
    swSer.begin(9600);
    Serial.begin(9600);

    Wire.begin(OLED_SDA, OLED_SCL);
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3c, false, false)) {
        return;
    }

    display.clearDisplay();
    display.setTextColor(WHITE);
    display.setTextSize(1);
    display.setCursor(0, 0);
    display.print("LORA TX");
    display.display();

    SPI.begin(SCK, MISO, MOSI, SS);
    LoRA.setPins(SS, RST, DIO0);
    
    display.setCursor(0, 10);
    display.print(LoRA.begin(BAND) ? "Starting LoRA OK!" : "Starting LoRA failed!");
    display.display();
    
    delay(1000);
}

void loop() {
    read_gps();
    tasktimer();
}
